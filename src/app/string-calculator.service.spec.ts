import { TestBed } from '@angular/core/testing';
import { StringCalculatorService } from './string-calculator.service';
import { of } from 'rxjs';

describe('StringCalculatorService', () => {
  let service: StringCalculatorService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(StringCalculatorService);
  });

  it('should be created StringCalculatorService', () => {
    expect(service).toBeTruthy();
  });

  describe('add', () => {
    it('should return 0 for an empty string', () => {
      service.add('').subscribe((res)=>{
        expect(res).toBe('0')
      }); 
    });

    it('should return the same number for all individual numbers', () => {
      service.add('5').subscribe((res)=>{
        expect(res).toBe('5')
      }); 
    });

    it('should return the sum of comma-separated numbers', () => {
      service.add('1,2,3').subscribe((res)=>{
        expect(res).toBe('6')
      }); 
    });

    it('should return the sum of comma-separated numbers with white-space', () => {
      service.add('1,2  , 3').subscribe((res)=>{
        expect(res).toBe('6')
      }); 
    });

    it('should return the sum of comma-separated Float Numbers with white-space', () => {
      service.add('1,2.4,  3').subscribe((res)=>{
        expect(res).toBe('6.4')
      }); 
    });

    it('should return the sum of comma-separated Float Numbers with white-space', () => {
      service.add('1,2.4,  3').subscribe((res)=>{
        expect(res).toBe('6.4')
      }); 
    });


    // handle all types of numbers

    it('should handle BigInt number by returning BigInt number', () => {
      service.add('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890').subscribe((res)=>{
        expect(res).toBe('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890')
      }); 
    });

    it('should return sum of comma-separated BigInt number and Interger', () => {
      service.add('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890,5').subscribe((res)=>{
        expect(res).toBe('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887895')
      }); 
    });

    it('should return sum of comma-separated BigInt number, Interger and Float number', () => {
      service.add('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890,5,1.3').subscribe((res)=>{
        expect(res).toBe('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887896.3')
      }); 
    });

    it('should handle huge Float number', () => {
      service.add('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890,5,1.8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887890').subscribe((res)=>{
        expect(res).toBe('123456789012345678901234568888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888887896.8888888888888888')
      }); 
    });

    it('should handle new lines between numbers instead of commas', () => {
      service.add('1,2\n3').subscribe((res)=>{
        expect(res).toBe('6')
      }); 
    });

    it('custom delimeter should return the sum of numbers seperated by custom delemeters', () => {
      service.add('//;\n1;4;4').subscribe((res)=>{
        expect(res).toBe('9')
      }); 
    });

    it('should throw an error if misplaced \\n in custom delimiter', () => {
      service.add('//;1;4;4').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Use Correct Custom Delimiter\'s Format');
        }
      });
    });

    it('should throw an error if custom delimiter is a number', () => {
      service.add('//1\n1;2;3').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Use Custom Delimiter other than "," ,"-", "Numbers" and "\n".');
        }
      });
    });


    it('should throw an error if custom delimiter is a ","', () => {
      service.add('//,\n1;2;3').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Use Custom Delimiter other than "," ,"-", "Numbers" and "\n".');
        }
      });
    });

    it('should throw an error if misplaced \\n in custom delimiter', () => {
      service.add('//;1;4;4').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Use Correct Custom Delimiter\'s Format');
        }
      });
    });

    it('should throw an error if custom delimiter is a "-"', () => {
      service.add('//-\n1;2;3').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Use Custom Delimiter other than "," ,"-", "Numbers" and "\n".');
        }
      });
    });

    it('should throw an error if custom delimiter format is not used correctly', () => {
      service.add('//;\n1*2,3').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('Delimiters ";" not used correctly');
        }
      });
    });

    it('should throw an error for negative numbers', () => {
      service.add('-1').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('negative numbers not allowed: -1');
        }
      });
    });

    it('should throw an error for negative numbers seprated by commas', () => {
      service.add('-1,-2').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('negative numbers not allowed: -1, -2');
        }
      });
    });

    it('should throw an error for adjecent negative numbers', () => {
      service.add('-1-2').subscribe({
        next: () => {},
        error: (err) => {
          expect(() => { throw err }).toThrowError('negative numbers not allowed: -1, -2');
        }
      });
    });

  });
});
